import os
import sys
import platform
import argparse
import ctypes
from typing import List


def is_admin_windows():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Windows"""
    try:
        return ctypes.windll.shell32.IsUserAnAdmin() != 0
    except:
        return False


def is_symlink(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ path —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π (–≤–∫–ª—é—á–∞—è WSL-—Å—Å—ã–ª–∫–∏ –≤ Windows)."""
    if platform.system() == "Windows":
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
            if os.path.islink(path):
                return True
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è WSL
            if os.path.isfile(path):
                with open(path, 'rb') as f:
                    header = f.read(10)
                    return header.startswith((b'lxsf', b'wsl$'))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            return bool(ctypes.windll.kernel32.GetFileAttributesW(os.path.abspath(path)) & 0x400)
        except:
            return False
    return os.path.islink(path)

def create_symlink(source: str, link_name: str, silent: bool = False) -> bool:
    """Create a symbolic link from source to link_name.

    Args:
        source: Path to the target file/directory.
        link_name: Path to the symbolic link to be created.
        silent: If True, suppresses all output messages.

    Returns:
        bool: True if successful, False otherwise.
    """
    if not os.path.exists(source):
        if not silent:
            print(f"–û—à–∏–±–∫–∞: –ò—Å—Ç–æ—á–Ω–∏–∫ '{source}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    try:
        if platform.system() == "Windows" and not is_admin_windows():
            print("–û—à–∏–±–∫–∞: –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Windows")
            return False

        if os.path.exists(link_name):
            print(f"–û—à–∏–±–∫–∞: '{link_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False

        if platform.system() == "Windows":
            target_is_dir = os.path.isdir(source)
            os.symlink(source, link_name, target_is_directory=target_is_dir)
        else:
            os.symlink(source, link_name)

        print(f"–°–æ–∑–¥–∞–Ω–æ: {link_name} ‚Üí {source}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False


def find_symlinks(directory: str = ".", recursive: bool = True) -> List[str]:
    """Finds all symbolic links in the directory (files and directories).

    Args:
        directory: Path to search in (default: current directory).
        recursive: If True, searches recursively.

    Returns:
        List of paths to symbolic links.
    """
    symlinks = []
    for root, dirs, files in os.walk(directory):  # Fixed: added dirs
        for name in files + dirs:
            path = os.path.join(root, name)
            if is_symlink(path):
                symlinks.append(path)
        if not recursive:
            break
    return symlinks


def delete_symlink(link_path: str, silent: bool = False) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not is_symlink(link_path):
            if not silent:
                print(f"‚ö†Ô∏è '{link_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π!")
            return False

        # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ Windows
        if platform.system() == "Windows":
            if os.path.isdir(link_path):
                os.rmdir(link_path)  # –î–ª—è junction –∏ —Å–∏–º–ª–∏–Ω–∫–æ–≤ –Ω–∞ –ø–∞–ø–∫–∏
            else:
                os.unlink(link_path)  # –î–ª—è —Å–∏–º–ª–∏–Ω–∫–æ–≤ –Ω–∞ —Ñ–∞–π–ª—ã
        else:
            os.unlink(link_path)

        if not silent:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {link_path}")
        return True

    except Exception as e:
        if not silent:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {link_path}: {str(e)}")
        return False

def recursive_delete(path: str, silent: bool = False) -> bool:
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –≤ –ø–∞–ø–∫–µ"""
    success = True
    for root, dirs, files in os.walk(path, topdown=False):
        for name in files + dirs:
            item_path = os.path.join(root, name)
            if is_symlink(item_path):
                if not delete_symlink(item_path, silent):
                    success = False
    return success

def main():
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫")
    subparsers = parser.add_subparsers(dest='command', required=True)

    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    parser_create = subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É')
    parser_create.add_argument('--silent', action='store_true', help='Suppress output messages')
    parser_create.add_argument('source', help='–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª/–ø–∞–ø–∫–∞')
    parser_create.add_argument('link_name', help='–ò–º—è —Å—Å—ã–ª–∫–∏')

    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
    parser_list = subparsers.add_parser('list', help='–ù–∞–π—Ç–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏')
    parser_list.add_argument('--directory', default='.', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞')
    parser_list.add_argument('--no-recursive', action='store_true', help='–ù–µ –∏—Å–∫–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ')

    # –ü–∞—Ä—Å–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    parser_delete = subparsers.add_parser('delete', help='–£–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É')
    parser_delete.add_argument('path', help='–ü—É—Ç—å –∫ —Å—Å—ã–ª–∫–µ')
    parser_delete.add_argument('--recursive', action='store_true', help='–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ')
    parser_delete.add_argument('--silent', action='store_true', help='Suppress output messages')

    args = parser.parse_args()

    if args.command == 'create':
        if not create_symlink(args.source, args.link_name):
            sys.exit(1)
    elif args.command == 'list':
        symlinks = find_symlinks(args.directory, not args.no_recursive)
        if symlinks:
            print("–ù–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏:")
            for link in symlinks:
                try:
                    target = os.readlink(link)
                except:
                    target = "???"
                print(f"{link} ‚Üí {target}")
        else:
            print("–°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    elif args.command == 'delete':
        if args.recursive and os.path.isdir(args.path):
            if not recursive_delete(args.path, args.silent):
                sys.exit(1)
        else:
            if not delete_symlink(args.path, args.silent):
                sys.exit(1)


if __name__ == "__main__":
    if platform.system() == "Windows" and not is_admin_windows():
        print("–í–Ω–∏–º–∞–Ω–∏–µ: –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –≤ Windows —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
    main()