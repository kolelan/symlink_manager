import os
import sys
import platform
import argparse
from typing import List, Optional

def is_symlink(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π."""
    return os.path.islink(path) if hasattr(os, 'islink') else False

def find_symlinks(directory: str = ".", recursive: bool = True) -> List[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)."""
    symlinks = []
    for root, _, files in os.walk(directory if recursive else directory + os.sep):
        for name in files + _:
            path = os.path.join(root, name)
            if is_symlink(path):
                symlinks.append(path)
    return symlinks

def delete_symlink(link_path: str, is_silent: bool = False) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É."""
    try:
        if not is_symlink(link_path):
            if not is_silent:
                print(f"‚ö†Ô∏è '{link_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–æ–π —Å—Å—ã–ª–∫–æ–π!")
            return False

        os.unlink(link_path)
        if not is_silent:
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ: {link_path}")
        return True

    except OSError as e:
        if not is_silent:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def create_symlink(source: str, link_name: str, is_silent: bool = False) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É (Windows/Linux)."""
    try:
        if os.path.exists(link_name):
            if not is_silent:
                print(f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ '{link_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False

        if platform.system() == "Windows":
            target_is_dir = os.path.isdir(source)
            os.symlink(source, link_name, target_is_directory=target_is_dir)
        else:
            os.symlink(source, link_name)

        if not is_silent:
            print(f"üîó –°–æ–∑–¥–∞–Ω–æ: {link_name} ‚Üí {source}")
        return True

    except OSError as e:
        if not is_silent:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ (Windows/Linux)")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    parser_create = subparsers.add_parser("create", help="–°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É")
    parser_create.add_argument("source", help="–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª/–ø–∞–ø–∫–∞")
    parser_create.add_argument("link_name", help="–ò–º—è —Å—Å—ã–ª–∫–∏")
    parser_create.add_argument("--silent", action="store_true", help="–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º")

    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫
    parser_list = subparsers.add_parser("list", help="–ù–∞–π—Ç–∏ –≤—Å–µ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏")
    parser_list.add_argument("--directory", default=".", help="–ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è)")
    parser_list.add_argument("--no-recursive", action="store_false", dest="recursive", help="–ù–µ –∏—Å–∫–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
    parser_delete = subparsers.add_parser("delete", help="–£–¥–∞–ª–∏—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É")
    parser_delete.add_argument("path", help="–ü—É—Ç—å –∫ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
    parser_delete.add_argument("--recursive", action="store_true", help="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–∞–ø–∫–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ")
    parser_delete.add_argument("--silent", action="store_true", help="–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º")

    args = parser.parse_args()

    if args.command == "create":
        success = create_symlink(args.source, args.link_name, args.silent)
        sys.exit(0 if success else 1)

    elif args.command == "list":
        symlinks = find_symlinks(args.directory, args.recursive)
        if symlinks:
            print("–ù–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏:")
            for link in symlinks:
                print(f"‚Üí {link}")
        else:
            print("–°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    elif args.command == "delete":
        if os.path.isdir(args.path) and args.recursive:
            symlinks = find_symlinks(args.path, recursive=True)
            if not symlinks:
                if not args.silent:
                    print("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                sys.exit(1)

            for link in symlinks:
                delete_symlink(link, args.silent)
        else:
            success = delete_symlink(args.path, args.silent)
            sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()